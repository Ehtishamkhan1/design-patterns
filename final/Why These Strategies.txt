Singleton Pattern:

Purpose: Ensures a class has only one instance and provides a global point of access to it.
Use Case: In the AdmissionSystem class, the Singleton pattern ensures that there is only one instance of the admission system, providing a single point of control for managing observers and making announcements.

Observer Pattern:
Purpose: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
Use Case: In the AnnouncementSubject class, the Observer pattern is used to notify multiple observers (User, Student, Parent, Teacher, Administration) when an announcement is made, enabling them to react accordingly.

Strategy Pattern:
Purpose: Defines a family of algorithms, encapsulates each one, and makes them interchangeable. It lets the algorithm vary independently from clients that use it.
Use Case: In the admission system, the AdmissionDecision interface with its implementations (RegularAdmission, EarlyDecision, TransferAdmission) represents the Strategy pattern. It allows the system to dynamically choose and apply different admission decision strategies without altering the client code.